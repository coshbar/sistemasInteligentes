# -*- coding: utf-8 -*-
"""Prova 2Bim - Gabriel Klimczak.ipynb
Automatically generated by Colaboratory.
Original file is located at
 https://colab.research.google.com/drive/1pNCP1DZXHtgsDvCytr3xIXZuND60C5zQ
 
**https://archive.ics.uci.edu/ml/datasets/bank+marketing**
**PARTE 1**
1. Normalizar a base
2. Balancear os dados
3. Treinar um modelo classificador utilizando DecisionTree, RandomForest e SVM (Support Vector Machine)
4. Avaliar a acurácia dos modelos treinados utilizando Cross Validation
5. Selecionar e salvar o melhor modelo
**PARTE 2**
6. Desenvolver um módulo de inferência
 6.1 Receber os dados de uma nova instância
 6.2 Classificar a nova instância com o modelo salvo
 6.3 Demonstrar a distribuição probabilística da classificação realizada
"""
#Importar bibliotecas
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import seaborn as sns
import math
from imblearn.over_sampling import SMOTE
from collections import Counter
from pickle import dump
from pickle import load
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_validate
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import plot_confusion_matrix
from sklearn import svm
from sklearn import metrics
from sklearn import preprocessing
from scipy.spatial.distance import cdist
#Carregar arquivo
ds = pd.read_csv('/content/bank-full.csv', sep = ';')
ds
#search for unique values
for col in ds.columns:
 print(col + ' unique values are:\n{}'.format(sorted(ds[col].unique())))
 print('Total number of values in this column is: \t{}'.format(ds[col].nunique()))
 print(85 * '-')
pd.crosstab(ds["job"], ds["y"]).plot(kind = "bar", figsize=(20, 10), color = ["black", "lightgray"])
plt.title("Relacao entre job e Y", fontsize = 20)
plt.xlabel("Different reasons categories", fontsize = 18)
plt.ylabel("Frequency", fontsize = 12)
plt.legend(["Job", "Y"], fontsize = 15);
#cleaning the dataset changing data types
ds['job'] = pd.Categorical(ds['job']).codes
ds['marital'] = pd.Categorical(ds['marital']).codes
ds['education'] = pd.Categorical(ds['education']).codes
ds['default'] = pd.Categorical(ds['default']).codes
ds['housing'] = pd.Categorical(ds['housing']).codes
ds['loan'] = pd.Categorical(ds['loan']).codes
ds['contact'] = pd.Categorical(ds['contact']).codes
ds['month'] = pd.Categorical(ds['month']).codes
ds['poutcome'] = pd.Categorical(ds['poutcome']).codes
ds['y'] = pd.Categorical(ds['y']).codes
ds
# Avaliar se as classes estão balanceadas
print('# Frequencia das y (atributoy)')
print(ds['y'].value_counts())
